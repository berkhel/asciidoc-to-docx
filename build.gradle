
plugins {
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
}


repositories {
    mavenCentral()
}

ext {
    inputFilenames = fileTree("${projectDir}/src").matching {
        include "**/*.adoc"
    }.getFiles()
    .stream()
        .map(File::getName)
        .map(name -> name.tokenize('.').first() )
        .toList()
}

asciidoctor {
    sourceDir 'src'
        baseDirFollowsSourceDir()

        outputOptions {
            backends = ['docbook']
        }
}


tasks.register('buildDocx'){
    dependsOn(['downloadPandoc','asciidoctor'])
        doLast {
            project.inputFilenames.each{ filename ->
                exec{
                    commandLine 'pandoc','-f','docbook','-t','docx',
                                "\"${asciidoctor.outputDir}\\${filename.toString()}.xml\"" ,
                                '-o', "\"${asciidoctor.outputDir}\\${filename.toString()}.docx\""
                }
            }
        }
}

tasks.register('downloadPandoc',Exec){
    onlyIf {
        !isPandocAvailable()
    }
    commandLine 'winget', 'install', '--source', 'winget', '--exact', '--id', 'JohnMacFarlane.Pandoc'
}

def isPandocAvailable() {
    try {
        exec {
            commandLine 'pandoc', '--version'
        }
        return true
    } catch (Exception e) {
        return false
    }
}
